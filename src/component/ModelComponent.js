/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 x.glb -o ModelComponent.js 
*/

import React, { useRef ,useState,useEffect} from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import mqtt from 'mqtt/dist/mqtt';
export default function Model(props) {


  const publishTopic = 'myTopic1';

  const [color, setColor] = useState('red');
  const [lightColors, setLightColors] = useState({
    Light_bedroom: 'blue',
    Light_garden: 'blue',
    Light_garage: 'blue',
    Light1_kitchen: 'blue',
    Light2_kitchen:'blue',
    Light_livingroom:'blue',
    Light2_livingroom:'blue',
    Light_bathroom:'blue'
    
    // Add more lights and their default colors here
  });
  const [fan,setFan] =useState(false);
  var rotationSpeed
  const handleClick = (key,value) => {
    const message = {
            // Create the message object to publish
            key:key,
            value:value, // Set the desired values
             // Set the desired values
          };
    client.publish(publishTopic, JSON.stringify(message))
  };
  const fanClick = () => {
    if(fan===false){
      setFan(true)
    } else{
      setFan(false)
    }
  };
  const cylinderRef = useRef();

  useFrame((state, delta) => {
    if (cylinderRef.current) {
      // Adjust the rotation speed (in radians per second) as needed
      
      if(fan){
        rotationSpeed = 1; // 1 radian per second
      }
      else{
        rotationSpeed = 0; // 1 radian per second
      }
      

      // Rotate the cylinder around the Y axis
      cylinderRef.current.rotation.y += rotationSpeed * delta;
    }
  });
  const client = mqtt.connect('ws://172.25.93.28:8083/mqtt')
  useEffect(() => {

        
        //const topic1="data/pa08/pa08dash/0808";
        
        client.on('connect', function() {
        client.subscribe('myTopic');
        console.log("Client has subscribed")
        });

        client.on('message', (topic, message) => {
          console.log(message.toString());
        handleJsonMessage(JSON.parse(message.toString()));
        });
    },[])
   // setInterval(function () {window.location.reload(false);}, 1000);
  

   const handleJsonMessage = (json) => {
    setFan(json.fan);

    for (const lightKey in lightColors) {
      console.log(lightKey)
      if (json[lightKey]) {
        setLightColors((prevLightColors) => ({
          ...prevLightColors,
          [lightKey]: json[lightKey],
        }));
      }
    }
  };

  const { nodes, materials } = useGLTF('/x.glb')
  return (
    <group {...props} dispose={null}>
      <group scale={[12.184, 12.184, 9.722]}>
        <mesh geometry={nodes.Plane.geometry} material={nodes.Plane.material} />
        <mesh geometry={nodes.Plane_1.geometry} material={nodes.Plane_1.material} />
        <mesh geometry={nodes.Plane_2.geometry} material={nodes.Plane_2.material} />
        <mesh geometry={nodes.Plane_3.geometry} material={nodes.Plane_3.material} />
      </group>
      <mesh geometry={nodes.Bedroom_1.geometry} material={nodes.Bedroom_1.material} position={[0, 0.022, 0]} scale={[12.184, 12.184, 9.722]} >
        <meshStandardMaterial color='brown' />
      </mesh> 
      <mesh geometry={nodes.Living_Room.geometry} material={nodes.Living_Room.material} position={[0, 0.042, 0]} scale={[12.184, 12.184, 9.722]} >
        <meshStandardMaterial color='brown' />
      </mesh> 
      <mesh geometry={nodes.Bathroom_1.geometry} material={nodes.Bathroom_1.material} position={[0, 0.025, 0]} scale={[12.184, 12.184, 9.722]} >
        <meshStandardMaterial color='brown' />
      </mesh> 
      <mesh geometry={nodes.Kitchen.geometry} material={nodes.Kitchen.material} position={[0, 0.015, 0]} scale={[12.184, 12.184, 9.722]} >
        <meshStandardMaterial color='brown' />
      </mesh> 
      <mesh geometry={nodes.Garage.geometry} material={nodes.Garage.material} position={[0, 0.007, 0]} scale={[12.184, 12.184, 9.722]} >
        <meshStandardMaterial color='brown' />
      </mesh> 
      <mesh geometry={nodes.Garden.geometry} material={nodes.Garden.material} position={[0, 0.009, 0]} scale={[12.184, 12.184, 9.722]} >
        <meshStandardMaterial color='darkgreen' />
      </mesh> 
      <mesh onClick={() => handleClick('Light_garage',lightColors['Light_garage'])} geometry={nodes.Light_garage.geometry} material={nodes.Light_garage.material} position={[-8.72, 6.208, 5.418]} scale={0.408} >
        <meshStandardMaterial color={lightColors['Light_garage']} />
      </mesh> 
      <mesh onClick={() => handleClick('Light_garden',lightColors['Light_garden'])} geometry={nodes.Light_garden.geometry} material={nodes.Light_garden.material} position={[-0.308, 6.208, 5.418]} scale={0.408} >
        <meshStandardMaterial color={lightColors['Light_garden']} />
      </mesh> 
      <mesh onClick={() => handleClick('Light_livingroom',lightColors['Light_livingroom'])} geometry={nodes.Light_livingroom.geometry} material={nodes.Light_livingroom.material} position={[-0.308, 6.208, -7.618]} scale={0.408} >
        <meshStandardMaterial color={lightColors['Light_livingroom']} />
      </mesh> 
      <mesh onClick={() => handleClick('Light_bedroom',lightColors['Light_bedroom'])} geometry={nodes.Light_bedroom1.geometry} material={nodes.Light_bedroom1.material} position={[-8.761, 6.208, -2.872]} scale={0.408} >
        <meshStandardMaterial color={lightColors['Light_bedroom']} />
      </mesh> 
      <mesh onClick={() => handleClick('Light_bathroom',lightColors['Light_bathroom'])} geometry={nodes.Light_bathroom1.geometry} material={nodes.Light_bathroom1.material} position={[-8.761, 6.208, -8.114]} scale={0.408} >
        <meshStandardMaterial color={lightColors['Light_bathroom']}/>
      </mesh> 
      <mesh onClick={() => handleClick('Light2_kitchen',lightColors['Light2_kitchen'])} geometry={nodes.Light2_kitchen.geometry} material={nodes.Light2_kitchen.material} position={[8.754, 6.208, -6.326]} scale={0.408} >
        <meshStandardMaterial color={lightColors['Light2_kitchen']} />
      </mesh> 
      <mesh onClick={() => handleClick('Light1_kitchen',lightColors['Light1_kitchen'])} geometry={nodes.Light1_kitchen.geometry} material={nodes.Light1_kitchen.material} position={[8.754, 6.208, 2.574]} scale={0.408} >
        <meshStandardMaterial color={lightColors['Light1_kitchen']} />
      </mesh> 
      <mesh geometry={nodes.Fan_livingroom_.geometry}   material={nodes.Fan_livingroom_.material} ref={cylinderRef} position={[0, 5.246, -4.586]} scale={[0.523, 0.187, 0.523]} >
        <meshStandardMaterial color='white' />
      </mesh> 
      <mesh onClick={() => handleClick('Light2_livingroom',lightColors['Light2_livingroom'])} geometry={nodes.Light2_livingroom.geometry} material={nodes.Light2_livingroom.material} position={[-0.308, 6.208, -1.16]} scale={0.408} >
        <meshStandardMaterial color={lightColors['Light2_livingroom']} />
      </mesh> 
      <mesh  geometry={nodes.Fan_holder_livingroom_.geometry} onClick={fanClick} material={nodes.Fan_holder_livingroom_.material} position={[0, 5.246, -4.586]} scale={[0.523, 0.187, 0.523]} >
        <meshStandardMaterial color='black' />
      </mesh> 
      <group scale={[12.184, 12.184, 9.722]}>
        <mesh geometry={nodes.Plane007.geometry} material={nodes.Plane007.material} >
        <meshStandardMaterial color='orange' />
      </mesh> 
        <mesh geometry={nodes.Plane007_1.geometry} material={nodes.Plane007_1.material} >
        <meshStandardMaterial color='orange' />
      </mesh> 
        <mesh geometry={nodes.Plane007_2.geometry} material={nodes.Plane007_2.material} >
        <meshStandardMaterial color='orange' />
      </mesh> 
        <mesh geometry={nodes.Plane007_3.geometry} material={nodes.Plane007_3.material} >
        <meshStandardMaterial color='orange' />
      </mesh> 
      </group>
    </group>
  )
}

useGLTF.preload('/x.glb')
